1. What is JavaScript?
-   JavaScript is a Dynamic Computer Programming Language. JavaScript is a lightweight programming language that
    web developers commonly use to create more dynamic interactions when developing web pages, applications and or even games. 
-   It is an interpreted programming language with object oriented capabilities.
-   JavaScript first known as LiveScript, but netscape changed its name to JavaScript.

2. what is the use of isNaN function?
-   The JavaScript isNan() Function is used to check whatever a given value is an illegal number or not. it returns true if
    the value is a NaN else returns false. it is different from the Number.isNaN() Method.
    syntax : isNan(value)
    : value - It is required value passed in the isNaN() Function.

3. What is negative infinity?
-   The negative infinity in JavaScript is a constant value that is used to represent a value that is the lowest available.
    this means that no other number is lesser then this value. It can be generated using a self-made function or by an arithmetic Operation.
-   JavaScript shows the the negative_infinity value as -infinity.

4. Which company developed JavaScript?
-   JavaScript was invented by Brendan Eich at netscape in 1995.
-   It was developed for netscape  nevigator web browser. 
-   After Netscape handed JavaScript over to ECMA, the Mozilla foundation continued to develop JavaScript for the Firefox browser.

5. What are undeclared and undefined variables?
-   undeclared varible means that variable does not exist in the program at all. Undeclared variables do not exist until the code assigning to them is executed.
-   undefined variable means a variable has been declared but does not have a value. A variable that has not been assigned a value is of type undefined . 
    A method or statement also returns undefined if the variable that is being evaluated does not have an assigned value.

6. write the code for adding new elements dynamically?
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <div class="main" id="div">
        <p>This is a paragraph 1</p>
        <p>This is a paragraph 2</p>
        <p id="p3">This is a paragraph 3</p>
        <p>This is a paragraph 4</p>
    </div>
    <script>
        div_tag = document.getElementById('div');
        //console.log(div_tag)
        p3_para = document.getElementById('p3');
        h1 = document.createElement('h1');
        txt = document.createTextNode('ADDING NEW ELEMENT.');
        h1.append(txt);
        p3_para.before(h1);
        //div_tag.append(h1)    
    </script>
</body>
</html>

7. What is the differnet between ViewState and SessionState?
-   Session is used mainly for storing user specific data [ session specific data ]. 
    In the case of session you can use the value for the whole session until the session expires or 
    the user abandons the session. Viewstate is the type of data that has scope only in the page in 
    which it is used. You canot have viewstate values accesible to other pages unless you transfer 
    those values to the desired page.
-   ViewState: 
      - Is sent back and forth between the server and client, taking up bandwidth.
      - Has no expiration date.
      - Is useful in a Web Farm / Web Garden
-   SessionState:
      - Can be persisted in memory, which makes it a fast solution. Which means state cannot be shared in the Web Farm/Web Garden.
      - Can be persisted in a Database, useful for Web Farms / Web Gardens.
      - Is Cleared when the session dies - usually after 20min of inactivity.

8. What is === Operator?
-   ‘===’ operator: It is known as strict equality operator, it compares both the value and the type which is why the 
    name “strict equality”. The strict equality ( === ) operator checks whether its two operands are equal, returning a Boolean result.
    Unlike the equality operator, the strict equality operator always considers operands of different types to be different.

9. How can the style/class of an element be changed?
-   We can change, add or remove any CSS property from an HTML element on the occurrence of any event with the help of JavaScript.
    There are two approaches that allow us to achieve this task.
    1. Changing CSS with the help of the style property:
        Syntax: document.getElementById("id").style.property = new_style
    2. Changing the class itself: We can use two properties that can be used to manipulate the classes.
        A : 1. The classList Property: The classList is a read-only property that returns the CSS class names of an element as a DOMTokenList object.
            Syntax: document.getElementById("id").classList
        B : 2. The className Property: This property is used to set the current class of the element to the specified class.
            Syntax: document.getElementById("id").className = class

10. How to read and write a file using JavaScript?
- The fs.readFile() and rs.writeFile() methods are used to read and write of a file using javascript. The file is read using the fs.readFile() function, 
  which is an inbuilt method. This technique reads the full file into memory and stores it in a buffer. 
  Syntax: fs.readFile( file_name, encoding, callback_function )
  Parameters: 
    1. filename: It contains the filename to be read, or the whole path if the file is saved elsewhere.
    2. encoding: It stores the file’s encoding. ‘utf8’ is the default setting.
    3. callback function: This is a function that is invoked after the file has been read. It requires two inputs

- The fs.writeFile() function is used to write data to a file in an asynchronous manner. If the file already exists, it will be replaced.
  Syntax: fs.writeFile( file_name, data, options, callback )
    1. Parameters: file_name: It’s a string, a buffer, a URL, or a file description integer that specifies the location of the file to be written.
      When you use a file descriptor, it will function similarly to the fs. write() method.
    2. data: The data that will be sent to the file is a string, Buffer, TypedArray, or DataView.
    3. options: It’s a string or object that may be used to indicate optional output options. It includes three more parameters that may be selected.

11. What are all the looping structures in JavaScript?
-   Using Loops, the statement needs to be written only once and the loop will be executed as per requirement.
-   1. for loop: a for statement consumes the initialization, condition, and increment/decrement in one line thereby providing a shorter, easy-to-debug structure of looping.
        Syntax: for (initialization condition; testing condition; increment/decrement)
                {
                 statement(s)
                }
    2. while loop: A while loop is a control flow statement that allows code to be executed repeatedly based on a given Boolean condition.
                   The while loop can be thought of as a repeating if statement. 
        Syntax: while (boolean condition)
                {
                  loop statements...
                }
    3. do-while: The do-while loop is similar to the while loop with the only difference that it checks for the condition after executing the statements, 
                  and therefore is an example of an Exit Control Loop. 
        Syntax: do{ 
                  statements.
                  }
                while (condition);    

12. How can you convert the string of any base to an integer in JavaScript?
- To convert a string to an integer parseInt(), Number(), and Unary operator(+) function is used in javascript. 
  parseInt() function returns Nan( not a number) when the string doesn't contain number. 
  If a string with a number is sent, then only that number will be returned as the output.

13. What is the function of the delete operator?
-   Delete is comparatively a lesser-known operator in JavaScript. This operator is more specifically used to 
    delete JavaScript object properties. The JavaScript pop(), shift(), or splice() methods are available to delete an element 
    from an array. But because of the key-value pair in an object, deleting is more complicated.

14. What are all the types of Pop Up boxes available in JavaAcript?
-   1. Alert Box: An alert box is often used if you want to make sure information comes through to the user.
                  When an alert box pops up, the user will have to click "OK" to proceed.
                  window.alert();
    2. Confirm Box: A confirm box is often used if you want the user to verify or accept something.
                    When a confirm box pops up, the user will have to click either "OK" or "Cancel" to proceed.
                    If the user clicks "OK", the box returns true. If the user clicks "Cancel", the box returns false.
                    window.confirm();
    3. Prompt Box: A prompt box is often used if you want the user to input a value before entering a page.
                   When a prompt box pops up, the user will have to click either "OK" or "Cancel" to proceed after entering an input value.
                   If the user clicks "OK" the box returns the input value. If the user clicks "Cancel" the box returns null.
                   window.prompt("sometext","defaultText")

15. What is the use of Void(0)?
-   JavaScript void 0 means returning undefined (void) as a primitive value. You might come across the term “JavaScript:void(0)” 
    while going through HTML documents. It is used to prevent any side effects caused while inserting an expression in a web page.

16. How can a page be forced to load another page in JavaScript?
-   We can use window.location property inside the script tag to forcefully load another page in Javascript. It is a reference to a Location object that 
    is it represents the current location of the document. We can change the URL of a window by accessing it.

17. What are the disadvantages of using innerHTML in JavaScript?
- Disadvantages of using innerHTML property in JavaScript:
  1. The use of innerHTML very slow: The process of using innerHTML is much slower as its contents as slowly built, also already parsed
                                     contents and elements are also re-parsed which takes time.
  2. Appending to innerHTML is not supported: Usually, += is used for appending in JavaScript. But on appending to an Html tag using 
                                              innerHTML, the whole tag is re-parsed.
  3. Content is replaced everywhere: Either you add, append, delete or modify contents on a webpage using innerHTML, 
                                     all contents is replaced, also all the DOM nodes inside that element are reparsed and recreated.
  4. Can break the document: There is no proper validation provided by innerHTML, so any valid HTML code can be used. This may break the 
                             document of JavaScript. Even broken HTML can be used, which may lead to unexpected problems.

